<?php
/**
 * 测试了各种常见的设计模式
 * 分别为：
 * 1、单例模式：一个类只有一个实例
 * 2、简单工厂模式：根据传入的参数不同选择实例化不同的类
 * 3、注册模式：又称注册树模式，注册器模式。由注册表中提供静态方法，让其他对象访问其中的数据，整个系统中的每个对象都可以访问这些数据对象
 * 4、适配器模式：将一个类的接口转换成需要的另外一个接口，使得原本不兼容的的类可以一起工作
 * 5、策略模式：针对不同的应用场景调用不同的策略对象
 * 6、观察者模式：一个对象状态变化时，所有相关的对象都将得到通知
 * 7、数据库对象映射模式：将对象和数据存储映射起来，对一个对象操作会映射对数据存储的操作
 * 8、原型模式：通过复制已经存在的实例来返回新的实例，而不是新建实例，并且原型（被复制的实例）是可定制的
 * 9、装饰器模式：不必重写任何已有的功能性代码，而是对某个基于对象应用增量变化
 * 10、迭代器模式：提供一种访问一个容器对象中的各个元素，而又不暴露其内部细节
 * 11、代理模式：给某一对象提供代理对象，并由代理对象控制具体对象的引用
 *
 * 1、建造者模式：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示的设计模式
 * 2、外观模式：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
 * 3、解释器模式：给定一种语言，定义它文法的一种表示，并定义一个解释器，该解释器利用该表示来解释语言中的句子
 */